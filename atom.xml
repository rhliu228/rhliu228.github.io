<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zoe的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rhliu228.github.io./"/>
  <updated>2019-07-22T13:19:54.247Z</updated>
  <id>https://rhliu228.github.io./</id>
  
  <author>
    <name>Liu.Runhua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS的强制类型转换</title>
    <link href="https://rhliu228.github.io./TypeCasting/"/>
    <id>https://rhliu228.github.io./TypeCasting/</id>
    <published>2019-06-28T06:00:00.000Z</published>
    <updated>2019-07-22T13:19:54.247Z</updated>
    
    <content type="html"><![CDATA[<p>本文是我在看了《你不知道的Javascript（中卷）》后对Javascript的强制类型转换的归纳和总结。看完书中的第一部分后，对强制类型转换和宽松相等、严格相等有了更透彻的理解。<br><a id="more"></a><br>将值从一种类型转换为另一种类型叫做类型转换（type casting），这是显示的情况；隐式的情况称为强制类型转换（coercion）。也可以说，类型转换发生在静态类型语言的编辑阶段，强制类型转换发生在动态类型语言的运行时。<br><strong>JS的强制类型转换只会返回基本类型值，不会返回对象和函数</strong>。可以从转换操作是否明显来划分显示强制类型转换和隐式强制类型转换。</p><h4 id="1-1-ToString"><a href="#1-1-ToString" class="headerlink" title="1.1 ToString"></a>1.1 ToString</h4><p>基本类型的字符串化规则为： null转化为”null”，undefined转化为”undefined”，true转化为”true”，false转化为”false”，数字的字符串化采用通用规则，不过极小和极大的数字使用指数形式。</p><p>对于对象来说，字符串化的背后规则是： </p><ol><li>调用对象自身的toString方法，如果返回基本类型值，就直接对该值使用String函数，不再进行后续步骤。</li><li>如果toString方法返回的是对象，再调用原对象的valueOf方法，如果valueOf方法返回原始类型的值，则对该值使用String函数，不再进行后续步骤。</li><li>如果valueOf方法返回的是对象，则报错。</li></ol><p>对于普通对象来说，除非自行定义，否则toString()返回内部属性[[Class]]的值，例如”[object Object]”,”[object RegExp]”。数组的默认toString方法经过了重新定义，将所有单元格字符串化后用”,”串联起来。</p><h4 id="1-2-ToNumber"><a href="#1-2-ToNumber" class="headerlink" title="1.2 ToNumber"></a>1.2 ToNumber</h4><p>将基本类型转换为数字的规则是： true转化为1，false为0。undefined转化为NaN，null转化为0。ToNumber对字符串的处理遵循数字常量的相关规则和语法。对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型，再遵循以上规则将其强制转换为数字。为了将值转换为基本类型值：</p><ol><li>抽象操作ToPrmitive会首先检查该值是否有valueOf()方法，如果有并且返回基本类型值，就使用该返回值进行强制类型转换。</li><li>如果没有就继续使用toString()方法返回的基本类型值进行强制类型转换。</li><li>如果valueOf和toString方法均不返回基本类型值，则产生TypeError错误。</li></ol><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Number([]);  //0</span><br><span class="line">Number(&quot;&quot;);  //0</span><br><span class="line">Number([1]);  //1</span><br><span class="line">Number([1,2]);  //NaN</span><br><span class="line">Number([&apos;abc&apos;]); //NaN</span><br></pre></td></tr></table></figure></p><h4 id="1-3-ToBoolean"><a href="#1-3-ToBoolean" class="headerlink" title="1.3 ToBoolean"></a>1.3 ToBoolean</h4><p>Javascript中的值可以分为两类：</p><ul><li>可以被强制转换为false的值</li><li>其他（被强制转换为true）的值</li></ul><p>以下是假值： </p><ul><li>undefined</li><li>null</li><li>false</li><li>+0, -0, NaN</li><li>“”</li></ul><p>除此之外，浏览器在某些特定情况下，在常规Javascript语法基础上自己创建了一些外来值，这些就是假值对象。假值对象看起来和普通对象差不多，但将它们强制转换为布尔值时结果为false。例如IE浏览器在新版本中为了摆脱对旧版本对象document.all的支持，将其设置为假值对象。</p><h4 id="1-4-隐式强制类型转换"><a href="#1-4-隐式强制类型转换" class="headerlink" title="1.4 隐式强制类型转换"></a>1.4 隐式强制类型转换</h4><p>显示强制转换主要指使用Number、parseInt、String和Boolean等函数，手动将各种类型的值，分别转换成数字、字符串或者布尔值。当然是否是显式，取决于个人的理解和经验。例如var a = +c; 如果你已经知道一元运算符+会将操作数显示强制转换为数字，那它就是显式的。<br>隐式类型转换则主要是因为各种运算符对操作数的数据类型是有要求的，遇到非预期的数据类型时，会尝试自动转换数值的数据类型，这时就会出现隐式类型转换。</p><h5 id="1-4-1-转换为字符串"><a href="#1-4-1-转换为字符串" class="headerlink" title="1.4.1 转换为字符串"></a>1.4.1 转换为字符串</h5><p>如果某个操作数是字符串或者通过与<strong>ToNumber</strong>抽象操作一样的处理对象方式能转换成字符串，则+号执行字符拼接操作。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [1,2];</span><br><span class="line">var b = [3,4];</span><br><span class="line">a + b;  //&apos;1,23,4&apos;</span><br></pre></td></tr></table></figure></p><p>因为数组的valueOf方法返回数组自身，无法得到基本类型值，于是转而调用toString，上例中的数组变成了”1,2”和”3,4”，+号将它们拼接后返回”1,23,4”。<br>有一个坑常被提到，即[] + {} 和{} + []，它们分别返回”[object Object]” 和0。原因在于第二个表达式的第一个操作数{}被当作了一个空的代码块，单独执行+[]进行的是强制将[]转换为数字的操作，结果会是0。<br>a+””和String(a)有一个细微的区别，如果a是对象，a+””会首先尝试调用a的valueOf方法，获取基本值失败后再调用toString方法。但是String(a)与之相反。</p><h5 id="1-4-2-转换为数字"><a href="#1-4-2-转换为数字" class="headerlink" title="1.4.2 转换为数字"></a>1.4.2 转换为数字</h5><p>除了加法运算符（+）有可能把运算子转为字符串，其他运算符都会把运算子自动转成数值。</p><h5 id="1-4-3-转换为布尔值"><a href="#1-4-3-转换为布尔值" class="headerlink" title="1.4.3 转换为布尔值"></a>1.4.3 转换为布尔值</h5><p>下面情况会发生布尔值的隐式强制类型转换：</p><ul><li>if语句</li><li>for(…;…;…)中的条件判断语句</li><li>while，do while</li><li>? : 中的条件判断表达式</li><li>|| &amp;&amp; 左边的操作数</li></ul><p>这里为什么指明|| 、&amp;&amp;左边的操作数而不是整个语句呢？因为和其他语言不同，在Javascript中该整个表达式返回的并不是布尔值，它的返回值是两个操作数中的一个（且仅一个）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var a = 42;</span><br><span class="line">var b = &quot;abc&quot;;</span><br><span class="line">var c = null;</span><br><span class="line"> a||b;  // 42</span><br><span class="line"> a&amp;&amp;b;  // &quot;abc&quot;</span><br><span class="line"> c||b;  // &quot;abc&quot;</span><br><span class="line"> c&amp;&amp;b;  // null</span><br></pre></td></tr></table></figure></p><p>所以与其它们为逻辑运算符，倒不如称它们为“选择器运算符”。</p><h4 id="1-5-宽松相等和严格相等"><a href="#1-5-宽松相等和严格相等" class="headerlink" title="1.5 宽松相等和严格相等"></a>1.5 宽松相等和严格相等</h4><p>宽松相等==和严格相等===的区别在于： <strong>==允许在相等比较中进行强制类型转换，===不允许</strong>。<br>ES5规范的抽象相等比较算法定义了==运算符的行为。</p><h5 id="1-5-1-有两个点需要时刻牢记："><a href="#1-5-1-有两个点需要时刻牢记：" class="headerlink" title="1.5.1 有两个点需要时刻牢记："></a>1.5.1 有两个点需要时刻牢记：</h5><ul><li>NaN不等于NaN</li><li>+0等于-0</li><li>两个对象的宽松相等，仅当它们指向同一个值时视为相等。</li></ul><h5 id="1-5-2-字符串和数字之间的比较"><a href="#1-5-2-字符串和数字之间的比较" class="headerlink" title="1.5.2 字符串和数字之间的比较"></a>1.5.2 字符串和数字之间的比较</h5><ul><li>如果Type(x)是数字，Type(y)是字符串，则返回x === ToNumber(y)的结果。</li><li>如果Type(x)是字符串，Type(y)是数字，则返回ToNumber(x) === y的结果。</li></ul><h5 id="1-5-3-其他类型和布尔类型之间的相等比较"><a href="#1-5-3-其他类型和布尔类型之间的相等比较" class="headerlink" title="1.5.3 其他类型和布尔类型之间的相等比较"></a>1.5.3 其他类型和布尔类型之间的相等比较</h5><ul><li>如果Type(x)是布尔类型，则返回ToNumber(x) === y的结果。</li><li>如果Type(y)是布尔类型，则返回x === ToNumber(y)的结果。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x = true;</span><br><span class="line">var y = &apos;42&apos;;</span><br><span class="line">x == y;  // false</span><br></pre></td></tr></table></figure><p>Type(y)是布尔值，首先将其转换为数字1，变成1 == ‘42’,二者类型不等，’42’根据1.5.2规则被转换为42，变成1==42，结果为false。由此可以看出，字符串’42’既不等于true也不等于false。</p><h5 id="1-5-4-null和undefined的相等比较"><a href="#1-5-4-null和undefined的相等比较" class="headerlink" title="1.5.4 null和undefined的相等比较"></a>1.5.4 null和undefined的相等比较</h5><ul><li>如果x为null，y为undefined，返回true。</li><li>如果x为undefined，y为null，返回true。</li></ul><p>除此之外其他值都不会和它们两个相等</p><h5 id="1-5-4-对象和非对象的相等比较"><a href="#1-5-4-对象和非对象的相等比较" class="headerlink" title="1.5.4 对象和非对象的相等比较"></a>1.5.4 对象和非对象的相等比较</h5><ul><li>如果Type(x)是数字或字符串，Type(y)是对象，则返回x === ToPrimitive(y)的结果。</li><li>如果Type(x)是对象，Type(y)是数字或字符串，则返回ToPrimitive(x) === y的结果。</li></ul><h5 id="1-5-5假值比较"><a href="#1-5-5假值比较" class="headerlink" title="1.5.5假值比较"></a>1.5.5假值比较</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;0&quot; == false // true</span><br><span class="line">false == 0    // true</span><br><span class="line">false == []   // true</span><br><span class="line">false == &#123;&#125; // false</span><br><span class="line">&quot;&quot; == 0      // true</span><br><span class="line">&quot;&quot; == []    //true</span><br><span class="line">0 == []     // true</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>还有一种极端的情况<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[] == ![]  // true</span><br></pre></td></tr></table></figure></p><p>上述表达式会首先进行布尔值的强制类型转换，所以[] == ![]变成了[] == false,由于[] == false，所以结果为true</p><h5 id="1-5-6总结"><a href="#1-5-6总结" class="headerlink" title="1.5.6总结"></a>1.5.6总结</h5><ul><li>如果两边的值中有true或者false，千万不要用==。</li><li>如果两边有[]，””或者0，尽量不要用==。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是我在看了《你不知道的Javascript（中卷）》后对Javascript的强制类型转换的归纳和总结。看完书中的第一部分后，对强制类型转换和宽松相等、严格相等有了更透彻的理解。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://rhliu228.github.io./blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS的类型和特殊值</title>
    <link href="https://rhliu228.github.io./Type_Value/"/>
    <id>https://rhliu228.github.io./Type_Value/</id>
    <published>2019-06-22T01:01:00.000Z</published>
    <updated>2019-07-22T13:21:13.172Z</updated>
    
    <content type="html"><![CDATA[<p>大多数开发者认为，像Javascript这样的动态语言是没有类型的，但是事实上，ECMAScript语言中所有的值都有一个对应的语言类型，ECMAScript语言类型包括：Undefined、null、Boolean、String、Object、Number、symbol。<br>Javascript中的变量是没有类型的，只有值才有。变量可以随时持有任何类型的值。<br><a id="more"></a></p><h5 id="1-undefined和undeclared"><a href="#1-undefined和undeclared" class="headerlink" title="1. undefined和undeclared"></a>1. undefined和undeclared</h5><p>已在作用域中声明但是还没有赋值的变量，是undefined的；相反，还没有在作用域中声明过的变量，是undeclared的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a;   // undefined</span><br><span class="line">b;   // ReferenceError: b is not defined</span><br></pre></td></tr></table></figure></p><p>这里 b is not defined 很容易让人以为是“b is undefined”,这里显示为为“b is not declared”会更准确。<br>更让人抓狂的是typeof处理undeclared变量的方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">typeof a;   // undefined</span><br><span class="line">typeof b;   // undefined</span><br></pre></td></tr></table></figure></p><p>对于undeclared的变量，typeof居然返回“undefined”。b虽然是一个undeclared的变量，但是typeof b并没有报错，这是因为typeof有一个特殊的安全防范机制。<br>然而，typeof的安全机制对于在浏览器中运行的js代码来说还是很有用处的，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 这样会报错</span><br><span class="line">if(DEBUG)&#123;</span><br><span class="line">    console.log(&apos;debug mode&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这样是安全的</span><br><span class="line">if(typeof DEBUG !== &apos;undefined) &#123;</span><br><span class="line">    console.log(&apos;debug mode&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有要为某个缺失的功能编写polyfill：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if(typeof atob === &apos;undefined&apos;) &#123;</span><br><span class="line">    //这里没有用var声明变量</span><br><span class="line">    atob = function() &#123;/** */&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果在if语句里声明var atob，因为存在变量声明提升，该声明会被提升到作用域最顶层，即使if语句条件不成立也是如此（即浏览器本来就支持atob）。在某些浏览器中，对于特殊的内置全局变量（宿主对象），这样的重复声明会报错。<br>还可以通过判断某个全局变量是否是全局对象的属性来避免undeclared变量的判断出错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(!window.atob) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>与undeclared变量不同，访问不存在的对象属性不会产生Reference error。</p><h5 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2. 字符串"></a>2. 字符串</h5><p>JS中的字符串是不可变的，但是数组是可变的。字符串不可变是指字符串的成员函数不会改变其原始值，而是创建并返回一个新的字符串，而数组的成员函数都是在其原始值上进行操作。<br>可以借用数组的非变异函数来处理字符串：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = &apos;foo&apos;;</span><br><span class="line">var c = Array.prototype.join.call(a,&quot;-&quot;);  //f-o-o</span><br><span class="line">var d = Array.prototype.map.call(a,function(v)&#123;</span><br><span class="line">    return v.toUpperCase() + &quot;.&quot;;</span><br><span class="line">&#125;);   //&quot;F.O.O.&quot;</span><br></pre></td></tr></table></figure></p><p>但是无法借用数组的变异函数来处理字符串，例如reverse，push等。为了实现字符串反转，可以：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var c = a.split(&quot;&quot;).reverse().join(&quot;&quot;);</span><br></pre></td></tr></table></figure></p><p>JS的数组变异函数包括： </p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul><h5 id="3-undefined和null"><a href="#3-undefined和null" class="headerlink" title="3. undefined和null"></a>3. undefined和null</h5><p>undefined类型只有一个值，即undefined，null类型也只有一个值，即null；它们的名称既是类型也是值。它们之间有一些细微的区别：</p><ul><li>null指空值，undefined指没有值</li><li>undefined指从未赋值，null指曾经赋过值，但目前没有值</li></ul><p>null是一个特殊关键字，不是标识符，不能被当作变量来使用和赋值，而undefined是一个标识符，可以被当作变量来使用和赋值。<br>3.1 在非严格模式下，我们可以为全局标识符undefined赋值，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">undefined = 2;   //ugly</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line">undefined = 2;  //TypeError</span><br></pre></td></tr></table></figure></p><p>3.2 在非严格和严格模式下，可以声明一个局部变量undefined：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var undefined = 2;</span><br><span class="line">console.log(undefined);  //ugly</span><br></pre></td></tr></table></figure></p><p>3.3 undefined是一个内置标识符，它的值为undefined，通过void运算符即可得到该值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 2;</span><br><span class="line">console.log(void a, a);  //undefined 2</span><br></pre></td></tr></table></figure></p><p>利用void运算符可以让表示式不返回任何结果，例如用于函数return语句中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    //...</span><br><span class="line">    return void setTimout(dosomething, 500);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4-NaN"><a href="#4-NaN" class="headerlink" title="4. NaN"></a>4. NaN</h5><p>js中有一个特殊的数字：NaN。NaN的含义是“Not a number”，如果数字运算的操作数不是数字，就无法返回一个有效的数字，这种情况下应该返回NaN。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 2/&apos;foo&apos;;  // NaN</span><br><span class="line">typeof a === &apos;number&apos;;  // true</span><br></pre></td></tr></table></figure></p><p>NaN是唯一一个非自反的值，即NaN !== NaN 为true。既然无法对NaN进行比较，那如何判断一个值是否是NaN呢?可以利用window对象内置的isNaN()方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isNaN(a);  //true</span><br></pre></td></tr></table></figure></p><p>但是这样方法有一个缺陷，它的检查方式是检查参数是否不是NaN，也不是数字。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = 2/&apos;foo&apos;;</span><br><span class="line">var b = &apos;foo&apos;;</span><br><span class="line">window.isNaN(a);  // true</span><br><span class="line">window.isNaN(b);  // true</span><br></pre></td></tr></table></figure></p><p>从ES6开始可以用Number.isNaN()检测，这个方法会避免上面的bug，其polyfill如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if(!Number.isNaN) &#123;</span><br><span class="line">    Number.isNaN = function(n) &#123;</span><br><span class="line">        return typeof n === &apos;number&apos; &amp;&amp;</span><br><span class="line">        window.isNaN(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//更简单的方法</span><br><span class="line">if(!Number.isNaN) &#123;</span><br><span class="line">    Number.isNaN = function(n) &#123;</span><br><span class="line">        return n!==n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="5-零值"><a href="#5-零值" class="headerlink" title="5. 零值"></a>5. 零值</h5><p>Javascript中有一个常规的0（也叫做+0）和-0。<br>-0除了可以用作常量之外，也可以是某些数学运算的返回值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var a = 0 / -3; //-0</span><br><span class="line">var b = 0 * -3; //-0</span><br></pre></td></tr></table></figure></p><p>加法和减法运算不会得到-0。有时候数学运算的符号位用来表示移动方向等信息。此时如果一个值为0的变量失去了它的符号位，它的方向信息就会丢失，这是-0存在的意义。<br>根据规范，对负零进行字符串操作会返回“0”：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var a = 0 / -3;</span><br><span class="line">console.log(a);  // &quot;-0&quot;</span><br><span class="line"></span><br><span class="line">//但是规范定义的返回结果是这样：</span><br><span class="line">a.toString(); //&quot;0&quot;</span><br><span class="line">a+&quot;&quot;;         //&quot;0&quot;</span><br><span class="line">String(a);    //&quot;0&quot;</span><br><span class="line">JSON.stringify(a); //&quot;0&quot;</span><br></pre></td></tr></table></figure></p><p>此外， 0与-0进行===比较时会返回true，为了区分二者，需要做一些特殊处理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function isNegZero(n) &#123;</span><br><span class="line">    n = Number(n);</span><br><span class="line">    return (n===0) &amp;&amp; (1/n===-Infinity)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="6-特殊等式"><a href="#6-特殊等式" class="headerlink" title="6. 特殊等式"></a>6. 特殊等式</h5><p>NaN和-0在相等比较时表现特殊，es6加入了Object.is()来判断两个值是否绝对相等，可以用来处理上述的特殊情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if(!Object.is) &#123;</span><br><span class="line">    Object.is = function(v1, v2) &#123;</span><br><span class="line">        //判断是否是-0</span><br><span class="line">        if(v1===0 &amp;&amp; v2===0)&#123;</span><br><span class="line">            return 1/v1 === 1/v2;</span><br><span class="line">        &#125;</span><br><span class="line">        //判断是否是NaN</span><br><span class="line">        if(v1 !== v1) &#123;</span><br><span class="line">            return v2 !== v2;</span><br><span class="line">        &#125;</span><br><span class="line">        return v1 === v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，能使用==和===就不要使用Object.is(),因为前者效率更高，更为通用。Object.is主要用来处理那些特殊的相等比较。</p><h5 id="7-值和引用"><a href="#7-值和引用" class="headerlink" title="7. 值和引用"></a>7. 值和引用</h5><p>在许多编程语言中，赋值和参数传递可以通过值复制或者引用复制的方法来完成，取决于使用的语法。但是在JS中，对值和引用的复制完全根据值的类型来决定，在语法上没有任何区别:<br><strong>简单值总是通过值复制的方式来赋值/传递；复合值总是通过引用复制的方式赋值或者传递。</strong><br>例如：<br>在c语言中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void swap(int &amp;x, int &amp;y) &#123;</span><br><span class="line">    int temp;</span><br><span class="line">    temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br><span class="line">main() &#123;</span><br><span class="line">    int a =1, b =2;</span><br><span class="line">    swap(a,b);</span><br><span class="line">    cout&lt;&lt;&quot;a=&quot;&lt;&lt;a&lt;&lt;&quot;b=&quot;&lt;&lt;b&lt;&lt;&quot;\n&quot;;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">//输出 a=2 b=1</span><br></pre></td></tr></table></figure></p><p>传引用调用实际上在形参位置插入的是变量本身，即值的内存位置。由于程序变量是作为内存位置来实现的，所以这些内存位置就是变量。引用相当于变量的<strong>别名</strong>，本身并不单独分配自己的内存空间，二者指向的是同一处内存。<br>而在JS中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function foo(x) &#123;</span><br><span class="line">    x.push(4);</span><br><span class="line">    x; //[1,2,3,4]</span><br><span class="line">    x = [4,5,6];</span><br><span class="line">    x.push(7);</span><br><span class="line">    x; //[4,5,6,7]</span><br><span class="line">&#125;</span><br><span class="line">var a = [1,2,3];</span><br><span class="line">foo(a);</span><br><span class="line">a; //[1,2,3,4]</span><br></pre></td></tr></table></figure></p><p>向函数传递a的时候，实际是将引用a的复本赋值给x，刚开始x和a指向的是同一处内存，所以x.push(4)改变的是同一个值。随后x不再指向数组[1,2,3,4],而是指向新分配的内存[4,5,6]。因为数组是复合值，所以这里默认采用引用赋值，不需要特殊的语法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数开发者认为，像Javascript这样的动态语言是没有类型的，但是事实上，ECMAScript语言中所有的值都有一个对应的语言类型，ECMAScript语言类型包括：Undefined、null、Boolean、String、Object、Number、symbol。&lt;br&gt;Javascript中的变量是没有类型的，只有值才有。变量可以随时持有任何类型的值。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://rhliu228.github.io./blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>webpack构建 ES2015+ module</title>
    <link href="https://rhliu228.github.io./ES6Module/"/>
    <id>https://rhliu228.github.io./ES6Module/</id>
    <published>2019-06-20T06:00:00.000Z</published>
    <updated>2019-07-22T13:09:27.211Z</updated>
    
    <content type="html"><![CDATA[<p>webpack与babel7结合，可以构建出更符合实际需求的ES2015+ module，本文从vue-cli3入手，讲述CLI工具如何结合babel、webpack等开发插件动态支持用户编译到ES2015+ ，提升代码运行效率<br><a id="more"></a><br>用vue CLI3搭建项目，发现该工具减少了现代前端工具在配置上的烦恼，且其基于webpack 4的预配置提供构建设置，尽可能地在工具链中加入当前和未来的最佳实践。通过vue-cli3构建项目时，它会安装Vue CLI运行时命令（vue-cli-service），选择功能插件，生成必要的配置文件，然后就可以愉快地专注于业务代码了。而且该CLI工具尊重各个第三方工具的配置文件，如果我们对这些依赖进行配置，可以很轻松地更改配置文件或者通过webpack-merge合并到最终的配置中。</p><p>当我第一次使用vue-cli3的时候，只是赞叹于它漂亮的GUI界面，并不了解vue-cli3在背后集成了什么配置。它在package.json的script入口提供了分别用于开发模式和生产模式的两个命令，当然我还采用了lint检查工具，所以一共三个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span><br><span class="line">  &quot;build&quot;: &quot;vue-cli-service build --modern&quot;,</span><br><span class="line">  &quot;lint&quot;: &quot;vue-cli-service lint&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>在开发阶段，CLI工具会充分利用webpack4在development模式下内置的调试工具以及热更新、热替换等进行构建优化。而翻看npm run build后的代码，发现打包后的代码跟我自己之前手动配置的差别很大。于是我开始查阅相关资料，了解Vue CLI3背后的配置以及其原理。</p><p>观察打包后的js文件，首先会发现每个chunk都会有两个副本，其中一个副本在文件名后面添加了legacy后缀名，另一个则没有。而在html文件中，给引入带有legacy后缀js文件的script标签添加了nomodule属性，另一个script标签则添加了type=module属性。<br>通过查阅type=module属性的作用可以了解到，在当下，对于大部分用户而言，我们根本不需要把代码编译到 ES5，不仅体积大，而且运行速度慢。我们需要做的，就是把代码编译到 ES2015+，然后为少数使用老旧浏览器的用户保留一个 ES5 标准的备胎即可。其核心原理在于依赖 <script type="module">的支持来分辨浏览器对 ES2015+ 代码的支持，并且可以用<script nomodule>进行优雅降级。<br>支持 <script type="module"> 的浏览器，必然支持下面的特性：</p><ul><li>async/await</li><li>Promise</li><li>Class</li><li>箭头函数、Map/Set、fetch 等等…</li></ul><p>而不支持 <script type="module"> 的老旧浏览器，会因为无法识别这个标签，而不去加载 ES2015+ 的代码。另外老旧的浏览器同样无法识别nomodule 属性，会自动忽略它，从而加载 ES5 标准的代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;module&quot; src=&quot;app.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script nomodule src=&quot;app-legacy.js&quot;&gt;&lt;/script&gt;   // legacy 是遗产的意思，在这里面是老旧的意思，理解成老旧的语法</span><br></pre></td></tr></table></figure><p>想要支持module和nomodule的核心就是 Babel7的插件预设babel-preset-env。babel-preset-env将基于实际浏览器以及运行环境，自动确定babel插件以及polyfill，转义ES2015以及此版本以上的语法。而该preset的esmodules属性可以让我们直接编译到 ES2015+ 的语法。<br>改造一下webpack，构建两次，分别用不同的 babel 配置，就可以编译出两份文件。<br>CLI引入了@vue/babel-preset-app插件来提供babel-preset-env的功能，插件支持用户构建应用程序、UMD或原生web组件，其配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// @vue/babel-preset-app/index.js</span><br><span class="line">// resolve targets</span><br><span class="line">  let targets</span><br><span class="line">  if (process.env.VUE_CLI_BABEL_TARGET_NODE) &#123;</span><br><span class="line">    // running tests in Node.js</span><br><span class="line">    targets = &#123; node: &apos;current&apos; &#125;</span><br><span class="line">  &#125; else if (process.env.VUE_CLI_BUILD_TARGET === &apos;wc&apos; || process.env.VUE_CLI_BUILD_TARGET === &apos;wc-async&apos;) &#123;</span><br><span class="line">    // targeting browsers that at least support ES2015 classes</span><br><span class="line">    // https://github.com/babel/babel/blob/master/packages/babel-preset-env/data/plugins.json#L52-L61</span><br><span class="line">    targets = &#123;</span><br><span class="line">      browsers: [</span><br><span class="line">        &apos;Chrome &gt;= 49&apos;,</span><br><span class="line">        &apos;Firefox &gt;= 45&apos;,</span><br><span class="line">        &apos;Safari &gt;= 10&apos;,</span><br><span class="line">        &apos;Edge &gt;= 13&apos;,</span><br><span class="line">        &apos;iOS &gt;= 10&apos;,</span><br><span class="line">        &apos;Electron &gt;= 0.36&apos;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else if (process.env.VUE_CLI_MODERN_BUILD) &#123;</span><br><span class="line">    // targeting browsers that support &lt;script type=&quot;module&quot;&gt;</span><br><span class="line">    targets = &#123; esmodules: true &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    targets = rawTargets</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // included-by-default polyfills. These are common polyfills that 3rd party</span><br><span class="line">  // dependencies may rely on (e.g. Vuex relies on Promise), but since with</span><br><span class="line">  // useBuiltIns: &apos;usage&apos; we won&apos;t be running Babel on these deps, they need to</span><br><span class="line">  // be force-included.</span><br><span class="line">  let polyfills</span><br><span class="line">  const buildTarget = process.env.VUE_CLI_BUILD_TARGET || &apos;app&apos;</span><br><span class="line">  if (</span><br><span class="line">    buildTarget === &apos;app&apos; &amp;&amp;</span><br><span class="line">    useBuiltIns === &apos;usage&apos; &amp;&amp;</span><br><span class="line">    !process.env.VUE_CLI_BABEL_TARGET_NODE &amp;&amp;</span><br><span class="line">    !process.env.VUE_CLI_MODERN_BUILD</span><br><span class="line">  ) &#123;</span><br><span class="line">    polyfills = getPolyfills(targets, userPolyfills || defaultPolyfills, &#123;</span><br><span class="line">      ignoreBrowserslistConfig,</span><br><span class="line">      configPath</span><br><span class="line">    &#125;)</span><br><span class="line">    plugins.push([</span><br><span class="line">      require(&apos;./polyfillsPlugin&apos;),</span><br><span class="line">      &#123; polyfills, entryFiles, useAbsolutePath: !!absoluteRuntime &#125;</span><br><span class="line">    ])</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    polyfills = []</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>翻看@vue/cli-service模块的源码， 我在里面找到CLI为了支持处理模板中的 module 和 nomodule 属性而引入的webpack插件：ModernModePlugin。该插件暴露了一个es6类，在该类的prototype属性上的apply方法定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apply (compiler) &#123;</span><br><span class="line">  if (!this.isModernBuild) &#123;</span><br><span class="line">    this.applyLegacy(compiler)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    this.applyModern(compiler)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>isModernBuild属性表示当前构建是否生成ES2015+版本的代码。若是为false，则调用applyLegacy方法，并把编译器对象作为参数传递过去：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">applyLegacy (compiler) &#123;</span><br><span class="line">  const ID = `vue-cli-legacy-bundle`</span><br><span class="line">  compiler.hooks.compilation.tap(ID, compilation =&gt; &#123;</span><br><span class="line">    compilation.hooks.htmlWebpackPluginAlterAssetTags.tapAsync(ID, async (data, cb) =&gt; &#123;</span><br><span class="line">      // get stats, write to disk</span><br><span class="line">      await fs.ensureDir(this.targetDir)</span><br><span class="line">      const htmlName = path.basename(data.plugin.options.filename)</span><br><span class="line">      // Watch out for output files in sub directories</span><br><span class="line">      const htmlPath = path.dirname(data.plugin.options.filename)</span><br><span class="line">      const tempFilename = path.join(this.targetDir, htmlPath, `legacy-assets-$&#123;htmlName&#125;.json`)</span><br><span class="line">      await fs.mkdirp(path.dirname(tempFilename))</span><br><span class="line">      await fs.writeFile(tempFilename, JSON.stringify(data.body))</span><br><span class="line">      cb()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>若为false，则调用applyModern方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">// use &lt;script type=&quot;module&quot;&gt; for modern assets</span><br><span class="line">data.body.forEach(tag =&gt; &#123;</span><br><span class="line">  if (tag.tagName === &apos;script&apos; &amp;&amp; tag.attributes) &#123;</span><br><span class="line">    tag.attributes.type = &apos;module&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// use &lt;link rel=&quot;modulepreload&quot;&gt; instead of &lt;link rel=&quot;preload&quot;&gt;</span><br><span class="line">// for modern assets</span><br><span class="line">data.head.forEach(tag =&gt; &#123;</span><br><span class="line">  if (tag.tagName === &apos;link&apos; &amp;&amp;</span><br><span class="line">      tag.attributes.rel === &apos;preload&apos; &amp;&amp;</span><br><span class="line">      tag.attributes.as === &apos;script&apos;) &#123;</span><br><span class="line">    tag.attributes.rel = &apos;modulepreload&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// inject links for legacy assets as &lt;script nomodule&gt;</span><br><span class="line">const htmlName = path.basename(data.plugin.options.filename)</span><br><span class="line">// Watch out for output files in sub directories</span><br><span class="line">const htmlPath = path.dirname(data.plugin.options.filename)</span><br><span class="line">const tempFilename = path.join(this.targetDir, htmlPath, `legacy-assets-$&#123;htmlName&#125;.json`)</span><br><span class="line">const legacyAssets = JSON.parse(await fs.readFile(tempFilename, &apos;utf-8&apos;))</span><br><span class="line">  .filter(a =&gt; a.tagName === &apos;script&apos; &amp;&amp; a.attributes)</span><br><span class="line">legacyAssets.forEach(a =&gt; &#123; a.attributes.nomodule = &apos;&apos; &#125;)</span><br><span class="line"></span><br><span class="line">if (this.unsafeInline) &#123;</span><br><span class="line">  // inject inline Safari 10 nomodule fix</span><br><span class="line">  data.body.push(&#123;</span><br><span class="line">    tagName: &apos;script&apos;,</span><br><span class="line">    closeTag: true,</span><br><span class="line">    innerHTML: safariFix</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // inject the fix as an external script</span><br><span class="line">  const safariFixPath = path.join(this.jsDirectory, &apos;safari-nomodule-fix.js&apos;)</span><br><span class="line">  const fullSafariFixPath = path.join(compilation.options.output.publicPath, safariFixPath)</span><br><span class="line">  compilation.assets[safariFixPath] = &#123;</span><br><span class="line">    source: function () &#123;</span><br><span class="line">      return new Buffer(safariFix)</span><br><span class="line">    &#125;,</span><br><span class="line">    size: function () &#123;</span><br><span class="line">      return Buffer.byteLength(safariFix)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  data.body.push(&#123;</span><br><span class="line">    tagName: &apos;script&apos;,</span><br><span class="line">    closeTag: true,</span><br><span class="line">    attributes: &#123;</span><br><span class="line">      src: fullSafariFixPath</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data.body.push(...legacyAssets)</span><br><span class="line">await fs.remove(tempFilename)</span><br><span class="line">cb()</span><br><span class="line">// 在 htmlWebpackPlugin 处理好模板的时候再处理下，把页面上 &lt;script nomudule=&quot;&quot;&gt; 处理成 &lt;script nomudule&gt;</span><br><span class="line">compilation.hooks.htmlWebpackPluginAfterHtmlProcessing.tap(ID, data =&gt; &#123;</span><br><span class="line">  data.html = data.html.replace(/\snomodule=&quot;&quot;&gt;/g, &apos; nomodule&gt;&apos;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>ios10.3版本有个bug，不支持 nomodule 属性，这样带来的后果就是 10.3 版本的 IOS 同时执行两份 JS 文件。有个hack写法可以解决这个问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 这个会解决 10.3 版本同时加载 nomodule 脚本的 bug，但是仅限于外部脚本，对于内联的是没用的</span><br><span class="line">// fix 的核心就是利用 document 的 beforeload 事件来阻止 nomodule 标签的脚本加载</span><br><span class="line">(function() &#123;</span><br><span class="line">  var check = document.createElement(&apos;script&apos;);</span><br><span class="line">  if (!(&apos;noModule&apos; in check) &amp;&amp; &apos;onbeforeload&apos; in check) &#123;</span><br><span class="line">    var support = false;</span><br><span class="line">    document.addEventListener(&apos;beforeload&apos;, function(e) &#123;</span><br><span class="line">      if (e.target === check) &#123;</span><br><span class="line">        support = true;</span><br><span class="line">      &#125; else if (!e.target.hasAttribute(&apos;nomodule&apos;) || !support) &#123;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;, true);</span><br><span class="line"></span><br><span class="line">    check.type = &apos;module&apos;;</span><br><span class="line">    check.src = &apos;.&apos;;</span><br><span class="line">    document.head.appendChild(check);</span><br><span class="line">    check.remove();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></p><p>这段代码被ModernModePlugin引入并定义在常量safariFix中。<br>参考链接：</p><ul><li><a href="https://github.com/shaodahong/dahong/issues/18">Webpack 构建策略 module 和 nomodule</a></li><li><a href="https://zhuanlan.zhihu.com/p/37148975">React 16 加载性能优化指南</a></li></ul></script></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack与babel7结合，可以构建出更符合实际需求的ES2015+ module，本文从vue-cli3入手，讲述CLI工具如何结合babel、webpack等开发插件动态支持用户编译到ES2015+ ，提升代码运行效率&lt;br&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://rhliu228.github.io./blog/tags/webpack/"/>
    
      <category term="babel" scheme="https://rhliu228.github.io./blog/tags/babel/"/>
    
      <category term="vue-cli3" scheme="https://rhliu228.github.io./blog/tags/vue-cli3/"/>
    
  </entry>
  
  <entry>
    <title>字符编码归纳</title>
    <link href="https://rhliu228.github.io./CharacterEncoding/"/>
    <id>https://rhliu228.github.io./CharacterEncoding/</id>
    <published>2019-06-16T12:57:35.000Z</published>
    <updated>2019-07-22T13:20:42.948Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章主要是对ASCII，UTF-8，Unicode，GBK编码等概念进行阐述并加以区别。<br><a id="more"></a><br>首先阐述三个跟字符相关的概念：</p><ul><li>字符表：要显示的字符的集合</li><li>字符编码：字符表中的字符对应的二进制表示</li><li>字符集：定义了一种规则，将一串二进制数字解释为一个字符</li></ul><p>例如，unicode给世界上的字符赋予一个独一无二的二进制编码，这是字符集方案，但是却没有定义字符是如何传输和存储的，而utf-8则是基于unicode的一种编码方案实现。</p><h4 id="1-ASCII"><a href="#1-ASCII" class="headerlink" title="1. ASCII"></a>1. ASCII</h4><p>ASCII是美国制定的字符编码，使用一个字节（8bit）存储字符，一共规定了128个字符的编码，最前面的一位统一规定为0。其中0-32号字符用于特殊用途的控制码，33-127号字符表示大小写字母和数字。<br>ASCII扩展字符集利用了字节前面的最高位，这样字符便扩展到255个，扩展的128-255字符主要用于横线、竖线、交叉等形状。</p><h4 id="2-中文编码"><a href="#2-中文编码" class="headerlink" title="2. 中文编码"></a>2. 中文编码</h4><ul><li><p>GB2312<br>GB2312是对ASCII的中文扩展，在这种情况下，原来 0 – 127 号字符代表的含义不变，这就是半角字符。但是两个大于127的字节连在一起时，就代表GB2312编码的字符。这两个字节的范围是：<br>第一个字节范围是[0xA1(161),0xF7(247)]，第二个字节的范围是[0xA1(161),0xFE(254)]<br>共收录了6763个汉字，还包括拉丁字母，希腊字母和日文字符，并对ASCII字符里已有的数、标点、字母赋予两个字节的编码，这就是全角字符。、</p></li><li><p>GBK<br>GB2312仅包含了常用汉字，没有编码生僻字以及繁体字，GBK就对其进行了扩展。只要第一个字节大于127，不管后面的字节是否大于127，就是GBK编码的字符。这两个字节的范围是：<br>第一个字节的范围是[0x81(127),0xFE(254)]，第二个字节的范围是[0x40(64),0x7E(126)]U[0x80(128),0xFE(254)]<br>GBK包含了GB2312的所有内容，提供了23940个编码，使用了21886个。</p></li><li><p>GB18030<br>把两个字节在GBK中还没有用完的码位用来编码一些少数民族的语言</p></li></ul><p>（GB2312,GBK,GB18030）最大的特点是两字节长的汉字字符和一字节长的英文字符并存于同一套编码方案里(这几种编码方案，同时用1个字节和两个字节编码)，因此写的程序为了支持中文处理，必须要注意字串里的每一个字节的值，如果这个值是大于127的，那么就认为一个双字节字符集里的字符出现了。</p><h4 id="3-unicode"><a href="#3-unicode" class="headerlink" title="3.unicode"></a>3.unicode</h4><p>中文采用GB类进行编码，但是其他国家也同样存在着各种编码方式，这样极其容易造成乱码。而unicode对世界上大部分的文字系统进行了整理、编码。但unicode只定义了符号的二进制代码，并没有规定这个二进制编码如何存储。若是要在计算机里存储unicode编码，有两个问题：</p><ul><li>第一个问题是如何区分unicode和ASCII，计算机如何知道三个字节代表三个符号还是一个符号。</li><li>采用定长的字节表示unicode字符，比如三个或者四个，对于只用一个字节就能表示的英文字母来说，会造成很大的存储空间浪费，每个英文字母前面必然有2到3个字节是0。<br>这造成的结果是 ，出现了unicode的多种存储方式，导致unicode在很长时间内无法推广</li></ul><h4 id="4-utf-8"><a href="#4-utf-8" class="headerlink" title="4.utf-8"></a>4.utf-8</h4><p>utf的含义是UCS Transfer Format，这是随着互联网的普及而诞生的统一的编码方式。utf-8是在互联网上使用最广的一种unicode的实现方式。其他方式还包括UTF-16、UTF-32，不过在互联网上基本不用。<br>utf-8的最大特点，就是它是一种变长的编码方式，使用1-4个字节表示一个符号，根据不同的符号变换字节长度。<br>其编码规则是：</p><ol><li>单字节的字符，第一位统一为0，后面七位是这个符号的unicode编码，utf-8码只占用一个字节，和ASCII码完全相同。</li><li>对于n（n&gt;1）个字节的字母,第一个字节的前n位设为1，第n+1位设置为0，后面字节的前两位都设为10，这n个字节的其余空位用来填空这个字符的unicode编码，高位用0补足。</li></ol><table><thead><tr><th style="text-align:left">Unicode范围</th><th style="text-align:left">编码格式</th><th style="text-align:center">剩余位数</th></tr></thead><tbody><tr><td style="text-align:left">000000-00007F</td><td style="text-align:left">0xxxxxxx</td><td style="text-align:center">7</td></tr><tr><td style="text-align:left">000080-0007FF</td><td style="text-align:left">110xxxxx 10xxxxxx</td><td style="text-align:center">11</td></tr><tr><td style="text-align:left">000800-00FFFF</td><td style="text-align:left">1110xxxx 10xxxxxx 10xxxxxx</td><td style="text-align:center">16</td></tr><tr><td style="text-align:left">010000-10FFFF</td><td style="text-align:left">11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td><td style="text-align:center">21</td></tr></tbody></table><p>由此可以总结出字符用UTF-8编码的规律：</p><ul><li>4个字节的utf-8十六进制编码一定是F开头</li><li>3个字节的utf-8十六进制编码一定是E开头</li><li>2个字节的utf-8十六进制编码一定是C或者D开头</li><li>1个字节的utf-8十六进制编码一定是小于8开头</li></ul><p>utf-16以两个字节为单位进行编码。utf-8需判断每个字节的开头标志信息，可能解析出错。而utf-16不会判断开头标志，即使错也是错一个字符，容错能力强。<br>Javascript内部，字符以utf-16的格式存储，每个字符两个字节。对于那些需要四个字节表示的unicode字符（unicode码点大于0xFFFFF），javascript会认为它们是两个字符。不过可以参考es6中关于字符串的扩展，看看是如何解决这个问题的…</p><p>参考</p><ul><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode和UTF-8 —— 阮一峰</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章主要是对ASCII，UTF-8，Unicode，GBK编码等概念进行阐述并加以区别。&lt;br&gt;
    
    </summary>
    
    
      <category term="字符编码" scheme="https://rhliu228.github.io./blog/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Javascript中的数字</title>
    <link href="https://rhliu228.github.io./NumberInJs/"/>
    <id>https://rhliu228.github.io./NumberInJs/</id>
    <published>2019-05-15T11:05:00.000Z</published>
    <updated>2019-07-22T13:21:23.799Z</updated>
    
    <content type="html"><![CDATA[<p>我们知道，在java中，数字会分为整型和浮点型，其中浮点型区分为单精度跟双精度格式。但是在JS中，只有Number型，并不区分整型跟浮点型，数字统一采用IEEE 754标准的64位双精格式进行存储。<br><a id="more"></a></p><h4 id="1-IEEE-754的双精度"><a href="#1-IEEE-754的双精度" class="headerlink" title="1. IEEE 754的双精度"></a>1. IEEE 754的双精度</h4><p>IEE754浮点数有三个基本构成：符号域(S)、指数域(E)、尾数域(M)。给定数值V，用双精度浮点数表述为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V = (-1)^S×2^*(E-1023)*1.M</span><br></pre></td></tr></table></figure></p><p>其中符号域S，指数E,尾数域M定义为： </p><ol><li>符号域S：占1位 （0代表正数，1代表负数）</li><li>指数E：占11位，也叫阶码（exponent），表示2的幂，它的作用是对浮点数加权。 阶码 = 阶码真值 + 偏移量</li><li>尾数域(M)：占52位，M是二进制小数。</li></ol><p>顺便提一下，32位单精度由1位符号位+8位阶码+23位尾数构成。</p><h5 id="1-1-为什么会有偏移量1023"><a href="#1-1-为什么会有偏移量1023" class="headerlink" title="1.1 为什么会有偏移量1023"></a>1.1 为什么会有偏移量1023</h5><p>11位指数表示范围为[-1024,1023], 需要引入符号位，例如将高位置1表示负数，这样0-1023表示正数，1024-2047表示负数。但这会给机器比较数字大小带来<br>麻烦（例如机器会认为2000比1023大，但实际上2000表示的是一个负数）。为了简化操作，可以考虑整体偏移1024位，变成[0,2047],要想得到原来的数字，只需要将存储数字减少1024即可。但由于数字0和2047适用于非规格化的情况，只能特殊处理（后面会介绍什么是规格化），去除了2个数字，所以用1023作偏移量即可。这种通过偏移，使得所有的数可以不用去考虑其符号的方法叫余码系统。经过以上处理，可以将指数的真实值称为阶码真值，阶码真值与偏移量相加得到阶码，阶码就是实际存储在机器上的数字。</p><h5 id="1-2-尾数M实际有多少位"><a href="#1-2-尾数M实际有多少位" class="headerlink" title="1.2 尾数M实际有多少位"></a>1.2 尾数M实际有多少位</h5><p>同一浮点数的表示方法有很多种，但规范一般采用科学计数法，二进制只有0和1，那么按照科学计数法，首位只可能是1，对此IEEE省略了默认的1，所以实际上有效尾数是有53位的。这时会出现一个问题， 尾数M省略的1是一定会存在的，以至于无法表示0，不过IEEE 754早就想到了这个问题。</p><h5 id="1-3-E阶码取值"><a href="#1-3-E阶码取值" class="headerlink" title="1.3 E阶码取值"></a>1.3 E阶码取值</h5><p>E阶码分为三种情况：</p><ol><li>规格化： S + (E!=0 &amp;&amp; E!=2047) + 1.M。此时阶码不能为0也不能为2047，<strong>只有这种情况，尾数域才会有隐含位1</strong>。</li><li>非规格化：此时E全为0，即阶码真值为-1023，如果尾数M全为0，则浮点数表示正负0；否则表示那些非常接近于0.0的数。</li><li>E全为1: 此时如果尾数域全为0，则表示Infinity和-Infinity，否则表示NaN：S + 11111111111 + (M!=0) 。</li></ol><h4 id="2-数字的范围"><a href="#2-数字的范围" class="headerlink" title="2. 数字的范围"></a>2. 数字的范围</h4><p>数字的范围有两个概念，一是最大正数和最小负数，二是最小正数和最大负数，即[最小负数，最大负数]并上[最小正数，最大正数]。从S、E、M三个维度看，S代表正负，E阶码值远大于M尾数个数，所以S决定大小，M决定精度。下面以E阶码分两种情况分析：</p><h5 id="2-1-规格化"><a href="#2-1-规格化" class="headerlink" title="2.1 规格化"></a>2.1 规格化</h5><p>规格化下，当E取最大值，即2046时，阶码真值为2046-1023=1023，从指数上看，数值范围是[-2^1023,2^1023]。JS函数计算Math.pow(2,1023)的结果是8.98846567431158e+307，如果尾数全为1，即1.1111111111 1111111111 1111111111 1111111111 1111111111 11，非常接近于2，将8.98846567431158e+307乘以2，得到的结果约等于1.7976931348623157e+308。这个值就是我们用JS常量<strong>Number.MAX_VALUE</strong>获取到的，两者非常接近，所以数字的范围是[-1.7976931348623157e+308,1.7976931348623157e+308]。如果数字绝对值超过1.7976931348623157e+308，则数字太大或者太小，在JS显示为Infinity和-Infinity，称为<strong>正向溢出</strong>。</p><h5 id="2-2-非规格化"><a href="#2-2-非规格化" class="headerlink" title="2.2 非规格化"></a>2.2 非规格化</h5><p>非规格化的情况下，E取值为0，阶码真值为-1023，指数最小值是2^1023，然而尾数等于0.0000000000 0000000000 0000000000 0000000000 0000000000 01，52位尾数还能虚拟化地向右移动51位，所以最小值是2^(-1074) = Math.pow(2,2074) 约等于5e-324。JS常量<strong>Number.MIN_VALUE</strong>就等于5e-324。所以(-5e-324,5e-324)之间的数比可表示的最小的数还要小，叫<strong>反向溢出</strong>。</p><h4 id="3-JS-整数的安全范围"><a href="#3-JS-整数的安全范围" class="headerlink" title="3.JS 整数的安全范围"></a>3.JS 整数的安全范围</h4><p>从M尾数分析，精度最多是53位，这决定了整数的安全范围远远小于Number.MAX_VALUE。如M取最大值：1.1111111111 1111111111 1111111111 1111111111 1111111111 11，E取52，则得到的结果是2^53-1,得到的结果是9007199254740991。而在ES6中，能够被“安全”呈现的最大整数是<strong>Number.MAX_SAFE_INTEGER</strong>，等于9007199254740991；最小整数是-9007199254740991，在ES6被定义为<strong>Number.MIN_SAFE_INTEGER</strong>。</p><h4 id="4-较小的数值比较"><a href="#4-较小的数值比较" class="headerlink" title="4. 较小的数值比较"></a>4. 较小的数值比较</h4><p>二进制浮点数的最大问题，是会出现以下情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0.1 + 0.2 === 0.3  // false</span><br></pre></td></tr></table></figure></p><p>因为尾数M只有52位，这决定了0.1和0.2不是十分精确，它们的相加结果并非刚好等于0.3，而是一个比较接近的数字0.30000000000000004，所以条件判断为false。为了判断0.1+0.2和0.3是否相等，最常见的方法是设置一个误差范围值，通常称为“机器精度”，对于JavaScript来说，这个值通常是2^-52(2.220446049250313e-16)。从ES6中开始，这个值被定义在<strong>Number.EPSILON</strong>中。</p><h4 id="5-32位有符号整数"><a href="#5-32位有符号整数" class="headerlink" title="5. 32位有符号整数"></a>5. 32位有符号整数</h4><p>虽然整数最大能够达到53位，但是有些数字操作（如数位操作）只适用于32位数字，所以这些操作中数字的安全范围就要小很多，变成从Math.pow(-2,31)(-2147483648)到Math.pow(2,31)(2147483648)。例如 a|0 可以将a中的数值转换为32位有符号整数</p><h4 id="6-32位无符号整数"><a href="#6-32位无符号整数" class="headerlink" title="6. 32位无符号整数"></a>6. 32位无符号整数</h4><p>Javascript数组下标值的范围为0到2^32-1。对于任意给定的数字下标值，如果不在此范围内，js会将它转换为一个字符串，并将该下标对应的值作为该数组对象的一个属性值而不是数组元素。如果该下标值在合法范围内，则无论该下标值是数字还是数字字符串，都一律会被转化为数字使用，即 array[“0”] = 0 和 array[0] = 0 执行的是相同的操作。</p><h4 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h4><p>用数轴来表示JS中各个Number常量的大小如下：</p><p><img src="/assets/img/axis.png" alt="JS中的数轴"></p><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">JS 32位整数</th><th style="text-align:center">64位双精度</th></tr></thead><tbody><tr><td style="text-align:left">场景</td><td style="text-align:left">数组索引，位运算</td><td style="text-align:center">Number</td></tr><tr><td style="text-align:left">整数范围</td><td style="text-align:left">数组索引：[0,2^32-1]，位运算：[-2^31,2^31]</td><td style="text-align:center">[-2^53-1,2^53-1]</td></tr><tr><td style="text-align:left">可表示的数范围</td><td style="text-align:left">同上</td><td style="text-align:center">[-1.7976931348623157e+308,-5e-324]U [5e-324, 1.7976931348623157e+308]</td></tr><tr><td style="text-align:left">精度</td><td style="text-align:left">1</td><td style="text-align:center">2^-52</td></tr></tbody></table><p>参考</p><ul><li><a href="https://www.boatsky.com/blog/26" target="_blank" rel="noopener">深入理解IEEE 754的64位精度</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们知道，在java中，数字会分为整型和浮点型，其中浮点型区分为单精度跟双精度格式。但是在JS中，只有Number型，并不区分整型跟浮点型，数字统一采用IEEE 754标准的64位双精格式进行存储。&lt;br&gt;
    
    </summary>
    
    
      <category term="Javascript" scheme="https://rhliu228.github.io./blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出RxJS总结</title>
    <link href="https://rhliu228.github.io./RxJS/"/>
    <id>https://rhliu228.github.io./RxJS/</id>
    <published>2019-03-15T08:01:00.000Z</published>
    <updated>2019-06-15T11:09:28.089Z</updated>
    
    <content type="html"><![CDATA[<p>很早就在一些博客和书籍上了解到，javascript是一门具备函数式编程特性的语言，虽然在日常工作也会接触到js的闭包，函数绑定，函数柯里化等概念，但对于函数式编程的特点和优势，一直一知半解。加之在工作中总会遇到异步处理的糟糕代码，所以前段时间花了一些功夫在阅读程墨著作的《深入浅出RxJS》上。总的来说，RxJS是Reactive Extension(也叫ReactiveX)编程理念的javascript版本。Reactive Extension是实践响应式编程的一套工具，其诞生的主要目的是解决异步处理的问题，但这并不表示Rx不适合同步的数据处理。这篇文章主要总结自己阅读《深入浅出RxJS》的一些思考，关于RxJS的具体使用可参考<a href="http://reactivex.io/" target="_blank" rel="noopener">ReactiveX</a>。<br><a id="more"></a></p><h2 id="函数响应式编程"><a href="#函数响应式编程" class="headerlink" title="函数响应式编程"></a>函数响应式编程</h2><p>RxJS引用了两个重要的编程思想：函数式和响应式</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><p>函数式编程是强调使用函数来解决问题的一种编程范式。其对函数的使用有一些特殊的要求： </p><ul><li><p>声明式<br>和声明式编程相对的是命令式编程，命令式编程强调将计算逻辑以指令的方式描述出来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function double(arr)&#123;</span><br><span class="line">    const result = [];</span><br><span class="line">    for(let i =0; i&lt;arr.length; i++) &#123;</span><br><span class="line">        result.push(arr[i]*2);</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  而声明式编程则把运算过程尽量写成一系列嵌套的函数调用：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const double = arr =&gt; arr.map(item =&gt; item * 2);</span><br></pre></td></tr></table></figure><p>  在javascript中，函数具有一等公民的地位，一个函数可以作为参数传递给另一个函数，才让map这种功能实现成为了可能。</p></li><li>纯函数<br>所谓纯函数，满足了以下条件</li></ul><ol><li>函数的执行过程完全由输入参数决定，不会受除参数之外的任何数据影响.</li><li>函数不会修改任何外部状态，比如修改全局变量或传入的参数对象.</li></ol><ul><li>数据不变性<br>程序要发生变化，不应该修改现有的数据，而是应该通过产生新的数据来体现这种变化。不可变的数据就是Immutable的数据。</li></ul><p>  顺便对比一下函数式编程和面向对象编程。这两种编程方式都可以让代码更加容易理解，但方式不同。面向对象的方法把状态的改变封装起来，外部不能直接操作数据，只能通过类提供的实例方法来读取修改数据，限制了对数据的访问方式，这就制止了毫无节制的数据修改。但是面向对象却把数据的修改历史完全隐藏起来，这种不确定性导致代码可维护性下降。而函数式编程则是尽量减少发生变化的部分，数据就是数据，函数就是函数，函数可以处理数据，通过产生新的数据作为运算结果，以此让代码更加清晰。<br>  从本质上说，javascript并不是纯粹意义的函数式编程语言，javascript并没有强制要求数据不变性，编写的函数也不能保证没有副作用，但是javascript的函数拥有第一公民的身份，由此可以很方便地应用函数式编程的许多思想。<br>More info:<br><a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html" target="_blank" rel="noopener">函数式编程入门教程</a><br><a href="http://www.ruanyifeng.com/blog/2012/04/functional_programming.html" target="_blank" rel="noopener">函数式编程初探</a></p><h3 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h3><blockquote><p>响应式编程是一种面向数据流和变化传递的编程范式。</p></blockquote><p>数据流可以通过多种方式创造出来，流对象中流淌的是数据，数据流会通过各种管道，这些管道会对数据进行各种转化处理，RxJS的核心就是使用和组合各种操作符，构成管道，对流经其中的数据进行处理。</p><h2 id="Observable-和Observer"><a href="#Observable-和Observer" class="headerlink" title="Observable 和Observer"></a>Observable 和Observer</h2><p>Observer和Obeservable是RxJS的两个重要概念。Obeservable就是“可被观察的对象”，而Observer就是观察者，连接两者的桥梁就是Observable对象的函数subscribe。<br>每个Observable对象，代表的就是在一段时间范围内发生的一系列事件。RxJs结合了观察者模式和迭代器模式，其中的Observable等同于：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable = Publisher + Iterator</span><br></pre></td></tr></table></figure><ul><li>观察者模式<br>观察者模式将逻辑分为发布者和观察者，其中生产者只负责产生事件，它会通知所有注册挂上号的观察者，而不关心这些观察者如何处理这些事件，相对的，观察者可以被注册上某个发布者，只管接收到事件之后就处理，而不关心这些数据是如何产生的。在RxJS的世界中，Observable对象就是一个发布者，通过Observable对象的subscribe，可以把这个发布者和某个观察者连接起来。<br>观察者使得复杂的问题被分解成三个小问题：</li></ul><ol><li>如何产生事件，这是发布者的责任，在RxJS中是Observable对象的工作。</li><li>如何响应事件，这是观察者的责任，在RxJS中由subscribe的参数来决定。</li><li>什么样的发布者关联什么样的观察者，也就是何时调用subscribe。</li></ol><ul><li>迭代器模式<br>迭代器指的是能够遍历一个数据集合的对象，数据集合的实现方式有很多，比如数组，单向链表等，迭代器的作用就是提供一个通用的接口，让使用者完全不用关心这个数据集合的集合的实现方式。<br>迭代器的另一个名字叫游标（cursor）,就像一个移动的指针一样，从集合中的一个元素移动到另一个元素，完成对整个集合的遍历。<br>迭代器的实现方式有很多，通常包含以下几个函数： </li></ul><ol><li>getCurrent，获取当前被游标指向的元素</li><li>moveToNext，将游标移动到下一个元素，调用这个函数之后，getCurrent获得的元素就会不同</li><li>isDone， 判断是否已经遍历完所有的元素<br>上面说的三个函数，是“拉”式迭代器的实现，而RxJs实现的是“推”式的迭代器的实现。因为在RxJS中，作为迭代器的使用者，并不需要主动从Observable中“拉”数据，而是只要subscribe上Observable对象之后，自然就能接收到消息的推送，这就是观察者模式和迭代器模式结合的强大之处。<br>下面是一段代码：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const iterator = getIterator();</span><br><span class="line">while(!iterator.isDone())&#123;</span><br><span class="line">    console.log(iterator.getCurrent());</span><br><span class="line">    iterator.moveToNext();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下这段代码说明了Observable在完结，出错处理以及向下游传递数据时如何通知下游。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">const onSubscribe = observer =&gt; &#123;</span><br><span class="line">    let number = 1;</span><br><span class="line">    const handle = setInterval(() =&gt; &#123;</span><br><span class="line">        observer.next(number++);</span><br><span class="line">    &#125;,1000);</span><br><span class="line">    return &#123;</span><br><span class="line">        unsubscribe: () =&gt; &#123;</span><br><span class="line">            clearInterval(handle);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 完结和出错处理</span><br><span class="line">const onSubscribe = observer =&gt; &#123;</span><br><span class="line">    observer.next(1);</span><br><span class="line">    // 向下游传递完结信号</span><br><span class="line">    observer.complete();</span><br><span class="line">    // or 向下游传递错误信号</span><br><span class="line">    //注意，一个Observable对象只能有一种终结状态，要么是完结，要么是出错，所以调用了complete之后再调用error函数是无法引发下游的错误处理函数调用的，反之亦然。</span><br><span class="line">    //observer.error(&apos;wrong&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const source$ = new Observable(onSubscribe);</span><br><span class="line">const theObserver = &#123;</span><br><span class="line">    next: item =&gt; console.log(item),</span><br><span class="line">    error: err =&gt; console.log(err),</span><br><span class="line">    complete: () =&gt; console.log(&apos;No more Data)</span><br><span class="line">&#125;</span><br><span class="line">const subscription = source$.subscribe(theObserver);</span><br><span class="line">// 也可以简写为</span><br><span class="line">// const subscription = source$.subscribe(</span><br><span class="line">//    item =&gt; console.log(item),</span><br><span class="line">//    err =&gt; console.log(err),</span><br><span class="line">//    complete: () =&gt; console.log(&apos;No more Data)</span><br><span class="line">//);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    //退订Observable</span><br><span class="line">    subscription.unsubscribe();</span><br><span class="line">&#125;,3500);</span><br></pre></td></tr></table></figure></p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>一个Observable对象代表的是一个数据流，实际工作中，产生Observable对象并不是每次都直接调用Observable构造函数来创建数据流对象，Rxjs已经贴心地为我们实现了常用的创建类操作符。这里说的创造，并不只是说返回一个Observable对象，而是指这些操作符不依赖于其他Observable对象，这些操作符可以凭空或者根据其他数据源（外部js事件，promise，ajax等）创造出一个Observable对象。事实上，对于复杂情况，并不会创建了一个数据流之后就直接subscribe一个Observer，往往需要各类操作符对数据流做一系列的处理，再交给Observer，就像一个管道，数据从管道的一段流入，途经管道的各个环节，位于管道末端的Observer只需要处理能够走到终点的数据。<br>  组成数据管道的元素就是操作符，操作符的本质是返回一个Observable对象的函数。对于每一个管道，链接的就是上游和下游。<br>  在数据管道中流淌的数据就像水，从上游流向下游。对于一个操作符来说，上游可能是一个数据源，也可能是其他操作符，下游可以是最终的观察者，也可能是另一个操作符。每个操作符都会满足</p><ol><li>返回一个全新的Observable对象</li><li>对上游和下游的订阅和退订处理。</li><li>处理异常情况</li><li>及时释放资源</li></ol><h3 id="操作符分类"><a href="#操作符分类" class="headerlink" title="操作符分类"></a>操作符分类</h3><h4 id="功能分类"><a href="#功能分类" class="headerlink" title="功能分类"></a>功能分类</h4><p>根据功能，操作符可以分为以下类别</p><ul><li>创建类，包括create, of, range, generate, repeat和repeatWhen, empty, throw, never, inteval和timer, from, from Promise, from event和fromEventPattern, ajax, defer.</li><li>转化类，包括map, mapTo, pluck, windowTime、 windowCount、windowWhen、windowToggle、和window, bufferTime、bufferCount、bufferWhen、bufferToggle和buffer, concatMap、mergeMap、switchMap、exhaustMap, scan和mergeScan</li><li>过滤类，包括filter, first, last, take, takeLast, takeWhile和takeUntil, skip, skipwhile和skipUntil, throttleTime、debouceTime和auditTime, throttle、debouce和audit, sample和sampleTime, distnct, distinctUntilChanged和distinctUntilKeyChanged, ignoreElements, elementAt, single</li><li>合并类，包括concat和concatAll, merge和mergeAll, zip和zipAll, combineLatest、combineAll和withLatestFrom, race, startWith, forkJoin, switch和exhaust</li><li>多播类，包括multicast, publishLast, publishReplay, publishBehavior</li><li>错误处理类，包括catch, retry和retryWhen, finally</li><li>辅助工具类，包括concat, max和min, Reduce, every, find和findIndex, isEmpty, defaultEmpty</li></ul><h4 id="静态和实例分类"><a href="#静态和实例分类" class="headerlink" title="静态和实例分类"></a>静态和实例分类</h4><p>  操作符还可以从存在形式进行分类，具体来说就是操作符的实现函数和Observable类的关系。对于定义在Observable类的静态函数，我们称之为静态操作符，而定义在由Observable类prototype属性指向的原型对象上的实例函数，则被称为实例操作符。在链式调用中，静态操作符只能出现在首位，而实例操作符可以出现在任何位置。有些操作符既可以作为Observable类的静态方法，又可以作为Observable对象的实例方法，比如merge。（此处涉及javascript的原型链知识以及es6的class，建议不太了解的读者查阅其他资料了解）</p><h3 id="操作符的实现"><a href="#操作符的实现" class="headerlink" title="操作符的实现"></a>操作符的实现</h3><h4 id="操作符函数实现"><a href="#操作符函数实现" class="headerlink" title="操作符函数实现"></a>操作符函数实现</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">function map(project) &#123;</span><br><span class="line">    return new Observable(observer =&gt; &#123;</span><br><span class="line">        const sub = this.subscribe(&#123;</span><br><span class="line">            next: value =&gt; &#123;</span><br><span class="line">                //处理异常情况</span><br><span class="line">                try&#123;</span><br><span class="line">                    observer.next(project(value))</span><br><span class="line">                &#125; catch(err) &#123;</span><br><span class="line">                    observer.error(error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: error =&gt; observer.error(error),</span><br><span class="line">            complete: () =&gt; observer.complete()</span><br><span class="line">        &#125;);</span><br><span class="line">        //订阅和退订处理</span><br><span class="line">        return &#123;</span><br><span class="line">            unsubscribe: () =&gt; &#123;</span><br><span class="line">                sub.unsubscribe();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">//使用es6箭头函数将会出错，因为此时this将直接绑定为定义函数环境下的this</span><br><span class="line">//const map = (project) =&gt; &#123;</span><br><span class="line">    //这个函数体内的this并不是Observable对象本身</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><p>可以看到，map利用new关键字创造了一个Observable对象，函数返回的结果就是这个对象，如此一来，map可以链式调用，可以在后面调用其他的操作符，或者调用subscribe增加Observer。这里的this代表的是上游的Observer对象，所以，可以直接使用subscribe订阅其中的事件，对于next事件，调用project函数，把推送的数据做映射，然后传递给下游，对于error和complete事件，map全部转手给下游处理。</p><h4 id="操作符关联Observable"><a href="#操作符关联Observable" class="headerlink" title="操作符关联Observable"></a>操作符关联Observable</h4><p>map函数编写完毕之后，需要将这个函数与observable关联起来。</p><ol><li>给Observable打补丁<br>打补丁就像是给Observable类添加一点功能。<br>map操作符需要一个上游Observable对象，所以它是一个实例操作符，需要赋值给Observable的prototype：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.map = mao;</span><br></pre></td></tr></table></figure></li></ol><p>如果是一个静态操作符，则直接赋给Observable类的某个属性。</p><ol start="2"><li>使用bind绑定Observable对象<br>有时候，我们并不希望一个操作符影响所有的Observable对象，为了不覆盖RxJS的map操作符，可以让自定义的操作符只对指定的Observable对象可用，这时可以用bind：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result$ = map.bind(source$)(x =&gt; x*2);</span><br></pre></td></tr></table></figure></li></ol><p>也可以用call：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result$ = map.call(source$,x =&gt; x*2);</span><br></pre></td></tr></table></figure></p><p>使用bind有一个缺点，就是上游Observable只能作为操作符函数的参数，这样没法用链式调用，比如，想要连续使用两个map：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result$ = map.bind(map.bind(source$)(x =&gt; x*2))(x =&gt; x+1);</span><br></pre></td></tr></table></figure></p><p>为了克服这个缺点，可以使用“绑定操作符”，绑定操作符是两个冒号，运算的时候绑定操作符后面的函数，但是保证函数运行时this是绑定操作符前面的对象，这样就可以使用链式调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result$ = source$::map(x=&gt;x*2)::map(x=&gt;x+1);</span><br></pre></td></tr></table></figure></p><p>绑定操作符并不是es6的标准语法，但它会出现在未来的es版本中，浏览器并不支持这种操作符。</p><ol start="3"><li>使用lift<br>RxJS v5对架构有很大的调整，很多操作符都会用一个神奇的lift函数实现，lift的含义是“提升”，功能是把Observable对象提升一个层次，赋予更多功能。lift是Observable的实例函数，它会返回一个新的Observable对象，通过传递给lift的函数参数可以赋予这个新的Observable对象特殊功能。<br>使用lift实现map： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function map(project) &#123;</span><br><span class="line">    return this.lift(function(source$) &#123;</span><br><span class="line">        return source$.subscribe(&#123;</span><br><span class="line">            next: value =&gt; &#123;</span><br><span class="line">                try&#123;</span><br><span class="line">                    this.next(project(value))</span><br><span class="line">                &#125; catch(err) &#123;</span><br><span class="line">                    this.error(error);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            error: err =&gt; this.error(err),</span><br><span class="line">            complete: () =&gt; this.complete(),</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>this代表的是Observer对象，参数source$代表上游的Observable对象。</p><h3 id="改进的操作符定义"><a href="#改进的操作符定义" class="headerlink" title="改进的操作符定义"></a>改进的操作符定义</h3><h4 id="操作符和Observable关联的缺陷"><a href="#操作符和Observable关联的缺陷" class="headerlink" title="操作符和Observable关联的缺陷"></a>操作符和Observable关联的缺陷</h4><p>js模块导入的代码并不都会被执行，打包工具（rollup，webpack等）的Tree shaking主要用于在js代码打包过程中去除无用的死代码，减少js代码的体积。<br>RxJS中操作符挂在Observable类上或者Observable.prototype上，赋值给Observable类和Observable.prototype上的某个属性在Tree shaking看来就是就是有用的代码，所以，所有的操作符，不管真实运行时是否被调用，都会被Tree shaking认为是有用的代码，不会被当作死代码删除。<br>比如，代码引入interval和map两个操作符：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &apos;rxjs/add/observable/interval&apos;;</span><br><span class="line">import &apos;rxjs/add/operator/map&apos;;</span><br></pre></td></tr></table></figure></p><p>假如在程序中interval和map并没有被调用过，这两个操作符也不会被当作死代码。<br>除此之外，用给Observable打补丁的方式导入操作符，每个文件模块影响的都是全局唯一的那个Observable，极其容易因为代码耦合造成问题。</p><h4 id="使用call来创建库"><a href="#使用call来创建库" class="headerlink" title="使用call来创建库"></a>使用call来创建库</h4><p>摒弃给Observable类打补丁的做法，对于静态操作符，直接使用该函数即可，对于实例操作符，使用bind/call方法，让一个操作符只对一个具体的Observable对象生效。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//留意导入路径的不同</span><br><span class="line">import &#123;Observable&#125; from &apos;rxjs/Observable&apos;;</span><br><span class="line">import &#123;of&#125; &apos;rxjs/observable/of&apos;;</span><br><span class="line">import &#123;map&#125; &apos;rxjs/operator/map&apos;;</span><br><span class="line">Observable.prototype.double = function() &#123;</span><br><span class="line">    return this::map(x =&gt; x*2);</span><br><span class="line">&#125;</span><br><span class="line">const source$ = of(1,2,3);</span><br><span class="line">const result$ =source$.double();</span><br><span class="line">result$.subscribe(value =&gt; console.log(value));</span><br></pre></td></tr></table></figure></p><p>上述代码导入的of和map是两个独立的函数，RxJs传统的打补丁的方式，使用的也是observable和operator目录下的代码，例如rxjs/add/observable/of.js文件所做的工作就是导入rxjs/observable/of.js，并把导入的函数挂载到Observable类上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var Observable__1 = require(&apos;../../Observable&apos;);</span><br><span class="line">var of_1 = require(&apos;../../observable/of&apos;);</span><br><span class="line">Observable__1.Observable.of = of_1.of;</span><br></pre></td></tr></table></figure></p><p>使用bind和call方法，避免了Observable被污染的问题。</p><h4 id="lettable和pipeable操作符"><a href="#lettable和pipeable操作符" class="headerlink" title="lettable和pipeable操作符"></a>lettable和pipeable操作符</h4><p>使用bind和call，每个函数体内依然需要访问this，访问this的函数并不是纯函数。另外，使用call也会让RxJS的代码失去类型检查的优势。从RxJS v5.5.0开始，加入了pipeable操作符，也曾称为lettable操作符。</p><ol><li>let<br>在lettable操作符提出之前，let操作符就存在了，它接受一个函数作为参数，该函数需要接收一个Observable对象作为上游Observable。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Observable&#125; from &apos;rxjs/Observable&apos;;</span><br><span class="line">import &apos;rxjs/add/observable/of&apos;;</span><br><span class="line">import &apos;rxjs/add/operator/map&apos;;</span><br><span class="line">import &apos;rxjs/add/operator/let&apos;;</span><br><span class="line">const source$ = Observable.of(1,2,3);</span><br><span class="line">//double$是一个纯函数，map直接作用于参数obs$</span><br><span class="line">const double$ = obs$ =&gt;obs$.map(x=&gt;x*2);</span><br><span class="line">const result$ = source$.let(double$);</span><br><span class="line">result$.subscribe(console.log);</span><br></pre></td></tr></table></figure></li></ol><p>改进以上代码，让map返回一个函数，从而可以作为let操作符的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function map(project) &#123;</span><br><span class="line">    return function(obs$)&#123;</span><br><span class="line">        return new Observable(observer =&gt; &#123;</span><br><span class="line">            return obs$.subscribe(&#123;</span><br><span class="line">                next: value =&gt; &#123;</span><br><span class="line">                    //处理异常情况</span><br><span class="line">                    try&#123;</span><br><span class="line">                        observer.next(project(value))</span><br><span class="line">                    &#125; catch(err) &#123;</span><br><span class="line">                        observer.error(error);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                error: error =&gt; observer.error(error),</span><br><span class="line">                complete: () =&gt; observer.complete()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const result$ = source$.let(map(x=&gt;x*2));</span><br></pre></td></tr></table></figure></p><p>let的作用是把map函数引入到链式调用之中，起到连接上游下游的作用。这里的map函数执行不再是返回一个Observable对象，而是返回一个函数，这个函数才返回Observable对象。，map的实现也看不到对this的访问，在数据管道中上游Observable对象以参数形式传入，而不是靠this获取，让map成为了一个纯函数。<br>从RxJS v5.5.0开始，加入了pipeable操作符，大部分操作符都有pipeable操作符实现，除了：</p><ol><li>静态操作符</li><li>拥有多个上游Observable对象的操作符</li></ol><p>因为每一个lettable操作符都是纯函数，且不会作为补丁挂在Observable类上，Tree shaking就能够找到根本不会被用到的操作符并将其去除。但是导入let这个操作符，却需要使用传统的打补丁的形式，所以RxJS让Observable类自带了一个新的操作符，名叫pipe，可以满足let的功能，却不需要像使用let一样导入模块，任何Observable对象都支持pipe<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const result$ = source$.pipe(map(x=&gt;x*2));</span><br></pre></td></tr></table></figure></p><p>pipe还具有管道的功能，可以把多个lettable操作符连接起来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;of&#125; &apos;rxjs/observable/of&apos;;</span><br><span class="line">//留意lettable操作符的引入路径</span><br><span class="line">import &#123;map,filter&#125; &apos;rxjs/operators&apos;;</span><br><span class="line">const source$ = of(1,2,3);</span><br><span class="line">const result$ = source$.pipe(</span><br><span class="line">    filter(x =&gt; x%2 ===0),</span><br><span class="line">    map(x =&gt; x*2)</span><br><span class="line">);</span><br><span class="line">result$.subscribe(console.log);</span><br></pre></td></tr></table></figure></p><p>有四个操作符比较特殊，传统的操作符名称和pipeable操作符名称不同：</p><ul><li>do</li><li>catch</li><li>switch</li><li>finally<br>这四个操作符名称都是js的关键字，以打补丁的方式赋值为Observable.prototype对象某个属性值没有问题，但是不能作为函数的标识符出现，这四个操作符对应的lettable操作符分别是</li><li>tap</li><li>catchError</li><li>switchAll</li><li>finalize</li></ul><h2 id="多播"><a href="#多播" class="headerlink" title="多播"></a>多播</h2><p>在RxJs中，Observable和Observer的关系，就是前者在播放内容，后者在收听内容，播放内容的方式可以分为三种：</p><ul><li>单播（unicast）</li><li>广播（broadcast）</li><li>多播（multicast）<br>单播是一对一的关系，一个播放者对应一个接听者，广播把消息传播给所有接听者，多播则是有选择性地把消息传递给有需要的接听者。RxJS对单播是绝对支持的，而广播则不是RXJS支持的目标，广播已经有很多现成的解决方法，例如nodeJs中的EventEmitter。</li></ul><h3 id="Hot和Cold数据流的差异"><a href="#Hot和Cold数据流的差异" class="headerlink" title="Hot和Cold数据流的差异"></a>Hot和Cold数据流的差异</h3><p>如果每一次观察者对Observable对象进行subscribe，都会产生一个全新的数据序列的数据流，这样的Observable对象被称为cold observable。RxJS的大部分创建类操作符创建出来的都是cold observable对象，例如inteval，range等。<br>下面是一个单播的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123;interval&#125; &apos;rxjs/observable/of&apos;;</span><br><span class="line">import &#123;take&#125; &apos;rxjs/operators&apos;;</span><br><span class="line">const tick$ = interval(1000).pipe(take(3));</span><br><span class="line">tick$.subscribe(value=&gt;console.log(&apos;observer 1: &apos; + value));</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    tick$.subscribe(value=&gt;console.log(&apos;observer 2: &apos; + value));</span><br><span class="line">&#125;,2000);</span><br><span class="line"></span><br><span class="line">//console</span><br><span class="line">//observer 1: 0</span><br><span class="line">//observer 1: 1</span><br><span class="line">//observer 2: 0</span><br><span class="line">//observer 1: 2</span><br><span class="line">//observer 2: 1</span><br><span class="line">//observer 2: 2</span><br></pre></td></tr></table></figure></p><p>你可能会以为输出下面的结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//observer 1: 0</span><br><span class="line">//observer 1: 1</span><br><span class="line">//observer 2: 1</span><br><span class="line">//observer 1: 2</span><br><span class="line">//observer 2: 2</span><br></pre></td></tr></table></figure></p><p>但是，interval操作符产生的是一个cold observable对象，每次对上游的subscribe都会产生一个新的生产者。<br>而对于一个hot observable，概念上有一个独立于Observable对象的生产者，这个生产者的创建与subscribe的调用没有关系，subscribe的调用只是让Observable对象连接上生产者而已。RxJs中有一些操作符产生的是Hot Observable：</p><ul><li>fromPromise</li><li>fromEvent</li><li>fromEventPattern</li></ul><p>这些产生hot observable对象的操作符数据源都在外部，真正的数据源和有没有Observer没有任何关系。而真正的多播，则是不管有多少Observer进行subscribe，推给Observer的数据都是一样的数据源，满足这种条件的，就是hot observable。<br>hot observable和cold observable都具有“懒”的性质，两者的数据管道内逻辑都只有订阅者存在时才执行，但是cold Observable更“懒”，如果没有订阅者，连数据都不会真正产生；对于hot observable来说，没有订阅者的情况下，数据依旧产生，只是不传入数据管道。<br>所以cold observable实现的是单播，而hot observable实现的是多播。</p><h3 id="Subject"><a href="#Subject" class="headerlink" title="Subject"></a>Subject</h3><p>有时候，我们也希望对cold observable实现多播。要把一个cold observable对象转换成一个hot observable，并不是去改变cold observable本身，而是产生一个新的observable对象，包装之前的cold observable对象，这样在数据流管道中，新的observable就成为了下游。<br>要实现这个转化，很明显需要一个“中间人”做串接的事情：</p><ul><li>中间人需要提供subscribe方法，让其他人能够订阅自己的数据源</li><li>中间人能够有办法接收推送的数据，包括cold observable推送的数据<br>RxJS中，提供了subject类型，subject既有observable的接口，也具有observer的接口。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Subject&#125; from &apos;rxjs/Subject&apos;;</span><br><span class="line">import &#123;interval&#125; &apos;rxjs/observable/interval&apos;;</span><br><span class="line">import &#123;map&#125; &apos;rxjs/operators&apos;;</span><br><span class="line">const subject = new Subject();</span><br><span class="line">subject.pipe(map(x=&gt;x*2)).subscribe(</span><br><span class="line">    value =&gt; console.log(value),</span><br><span class="line">    err =&gt; console.log(err),</span><br><span class="line">    () =&gt; console.log(&apos;on complete&apos;)</span><br><span class="line">);</span><br><span class="line">subject.next(1);</span><br><span class="line">subject.next(2);</span><br><span class="line">subject.complete();</span><br></pre></td></tr></table></figure></li></ul><p>一个subject对象是一个Observable，所以可以在后面链式调用任何操作符，也可以调用subscribe来添加Observer。<br>一个subject对象同时也是一个Observer，所以也支持next，error和complete方法。</p><h3 id="用Subject实现多播"><a href="#用Subject实现多播" class="headerlink" title="用Subject实现多播"></a>用Subject实现多播</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Subject&#125; from &apos;rxjs/Subject&apos;;</span><br><span class="line">import &#123;interval&#125; &apos;rxjs/observable/interval&apos;;</span><br><span class="line">import &#123;map&#125; &apos;rxjs/operators&apos;;</span><br><span class="line">const tick$ = interval(1000).pipe(take(3));</span><br><span class="line">const subject = new Subject();</span><br><span class="line">tick$.subscribe(subject);</span><br><span class="line">subject.subscribe(value=&gt;console.log(&apos;observer 1: &apos; + value));</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    subject.subscribe(value=&gt;console.log(&apos;observer 2: &apos; + value));</span><br><span class="line">&#125;,1500);</span><br></pre></td></tr></table></figure><p>只需要让Subject对象居于cold observable和observer之间。<br>但是很可惜subject并不是一个操作符，所以无法链式调用，不过可以创建一个新的操作符来达到链式调用的效果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.makeHot = function() &#123;</span><br><span class="line">    const cold$ = this;</span><br><span class="line">    const subject = new Subject();</span><br><span class="line">    cold$.subscribe(subject);</span><br><span class="line">    return subject;</span><br><span class="line">&#125;</span><br><span class="line">const hotTick$ = interval(1000).pipe(take(3)).makeHot();</span><br><span class="line">hotTick$.subscribe(value=&gt;console.log(&apos;observer 1: &apos; + value));</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    hotTick$.subscribe(value=&gt;console.log(&apos;observer 2: &apos; + value));</span><br><span class="line">&#125;,1500);</span><br></pre></td></tr></table></figure></p><p>这段代码有个漏洞，可以直接调用makeHot返回的subject对象的next，error或者complete方法来影响下游：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const hotTick$ = interval(1000).pipe(take(3)).makeHot();</span><br><span class="line">hotTick$.complete();</span><br><span class="line">//下面的Observer将不会收到任何消息</span><br><span class="line">hotTick$.subscribe(value=&gt;console.log(&apos;observer 1: &apos; + value));</span><br></pre></td></tr></table></figure></p><p>subject对象是不能重复使用的，一个subject对象一旦被调用了complete或者error函数，那么，它作为observable的生命周期也就结束了，后续再想利用这个subject对象传递数据给下游，就像泥牛如大海，没有任何反应。<br>为了杜绝这种可能性，对makeHot进行改进，让它返回一个纯粹的Observable对象:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.makeHot = function() &#123;</span><br><span class="line">    const cold$ = this;</span><br><span class="line">    const subject = new Subject();</span><br><span class="line">    cold$.subscribe(subject);</span><br><span class="line">    return Observable.create((observer) =&gt; subject.subscribe(observer));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>makeHot并不是直接返回Subject对象，而是返回一个新的Observable对象，这样就避免了subject直接暴露给外部。</p><p>subject可以有多个上游，如果一个subject订阅多个数据流，起到的作用就是把多个数据源的内容汇聚到一个observable，但是这种使用方式却可能引发意想不到的结果。假设其中一个上游调用了subject对象的complete函数，那即使其他上游的数据还没推送完，subject也会因为生命周期的结束，无法再把其他数据推送给下游。<br>任何一个上游数据的完结或者出错都可以终结subject对象的生命，让subject来做合并数据流的工作并不合适，应该让merge来做。<br>当subject有多个observer时，如果某个observer产生了一个错误异常，而且这个异常没有被observer处理，那subject的其他observer都会失败。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const tick$ = interval(1000).pipe(take(3));</span><br><span class="line">const subject = new Subject();</span><br><span class="line">tick$.subscribe(subject);</span><br><span class="line">const throwOnUnluckyNumber = value =&gt; &#123;</span><br><span class="line">    if(value==4)&#123;</span><br><span class="line">        throw new Error(&apos;unlucky number 4&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return value;</span><br><span class="line">&#125;</span><br><span class="line">subject.pipe(map(throwOnUnluckyNumber)).subscribe(</span><br><span class="line">    value=&gt;console.log(&apos;observer 1: &apos; + value)</span><br><span class="line">)</span><br><span class="line">subject.subscribe(</span><br><span class="line">    value=&gt;console.log(&apos;observer 2: &apos; + value),</span><br><span class="line">    err=&gt;console.log(err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>1号observer在遇到数字4的时候遇到错误异常，2号observer因为1号observer没有优雅地处理错误，也被牵连，因为subject对象由于下游1号Observer没有处理错误而被破坏了。<br>可以想象，Subject为了给所有observer推送数据，会有类似的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let observer of allObservers)&#123;</span><br><span class="line">    observer.next(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了解决这个问题，好的编程实践是让所有的observer都具备对异常错误的处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subject.pipe(map(throwOnUnluckyNumber)).subscribe(</span><br><span class="line">    value=&gt;console.log(&apos;observer 1: &apos; + value),</span><br><span class="line">    err=&gt;console.log(&apos;observer 1 on error: &apos; + err)</span><br><span class="line">)</span><br><span class="line">subject.subscribe(</span><br><span class="line">    value=&gt;console.log(&apos;observer 2: &apos; + value),</span><br><span class="line">    err=&gt;console.log(&apos;observer 2 on error: &apos; + err)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><h3 id="支持多播的操作符"><a href="#支持多播的操作符" class="headerlink" title="支持多播的操作符"></a>支持多播的操作符</h3><p>RxJs提供了支持多播的一系列操作符，其中最基础的是</p><ul><li>multicast</li><li>share </li><li>publish</li></ul><ol><li>multicast是一个实例操作符，能够以上游的Observable为数据源产生一个新的hot observable对象：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const hotSource$ = coldSource$.multicast(new Subject);</span><br></pre></td></tr></table></figure></li></ol><p>multicast接收一个subject对象或者一个返回subject对象的函数（可以在subject对象生命终结时重新subscribe上游）作为参数，<br>返回的是一个Observable对象，不过这个对象比较特殊，是Observable子类ConnectableObservable的实例对象。这种对象包含一个connect函数，connect的作用是<br>触发multicast用Subject对象去订阅上游的Observable，如果不调用这个函数，这个ConnectableObservable将不会从上游那里得到任何数据。<br>除此之外，ConnectableObservable还支持自动计数，对Observer的个数进行计数，当第一个Observer对象被添加时，主动去订阅上游，当最后一个Observer退订时，就让中间人<br>Subject退订上游的Cold Observable。这个功能可以借助ConnectableObservable对象的函数refCount实现。<br>除了第一个参数指定一个Subject对象或者指定一个产生Subject对象的工厂方法，multicast还支持第二个参数：selector，这个参数是一个可选参数，它可以使用上游数据任意多次，但不会重复订阅上游数据流。<br>一旦指定selector参数，multicast将不会返回ConnectableObservable对象，而是用selector函数来产生一个Observable对象。<br>selector函数有一个参数shared，这个参数就是multicast第一个参数代表的Subject或者使用工厂方法返回的Subject对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">const coldSource$ = interval(1000).pipe(take(3));</span><br><span class="line">const selector = shared =&gt; &#123;</span><br><span class="line">    return shared.pipe(concat(of(&apos;done)));</span><br><span class="line">&#125;</span><br><span class="line">const tick$ = coldSource$.pipe(multicast(new Subject(),selector));</span><br><span class="line">tick$.subscribe(</span><br><span class="line">    value=&gt;console.log(&apos;observer 1: &apos; + value),</span><br><span class="line">    err=&gt;console.log(&apos;observer 1 on error: &apos; + err)</span><br><span class="line">);</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    tick$.subscribe(</span><br><span class="line">        value=&gt;console.log(&apos;observer 2: &apos; + value),</span><br><span class="line">        err=&gt;console.log(&apos;observer 2 on: error: &apos; + err)</span><br><span class="line">    );</span><br><span class="line">&#125;);</span><br><span class="line">//console</span><br><span class="line">//observer 1: 0</span><br><span class="line">//observer 1: 1</span><br><span class="line">//observer 1: 2</span><br><span class="line">//observer 1: done</span><br><span class="line">//observer 2: done</span><br></pre></td></tr></table></figure></p><ol start="2"><li><p>publish完全是通过multicast来实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function(selector)&#123;</span><br><span class="line">    if(selector)&#123;</span><br><span class="line">        return this.multicast(()=&gt;new Subject(),selector);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return this.multicast(new Subject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>shared完全是通过multicast来实现的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.shared = function shared() &#123;</span><br><span class="line">    return this.multicast(() =&gt; new Subject()).refCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>除了以上这几个基础的多播操作符外，RxJS还支持三个高级多播操作符：</p><ul><li>publishList</li><li>publishReplay</li><li>publishBehavior<br>关于它们的使用可以自行查阅官网</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>《深入浅出RxJS》这本书较为系统的介绍了RxJS的核心特性和各类操作符，并且书该书结合弹珠图，将代码例子形象生动地描述清楚，给读者提供了很好的入门教程。个人觉得从书中前三章中得到的收获最大，从中了解到RxJS的代码架构、函数式编程的理念和如何实现操作符。后面介绍操作符用途的章节略显冗长，不过其中有些代码的例子特别贴切和生动，让人有眼前一亮的快感。可以看出作者对RxJS各类操作符的了解是非常深刻的。<br>  例如，讲解RxJS的高阶observable，所谓高阶，指的是该Observable返回的依旧是Observable，这样能够管理多个数据流，将管理数据和管理数据流归一化，类似于高阶函数，高阶函数的参数或者返回值是一个函数。这时就需要一些操作符能够组合或者处理这些高阶Observable，将其“砸平”，常见的有合并类高阶操作符concatAll，mergeAll，以及高阶的map等。<br>为了说明高阶map运算符concatMap的用途，作者列举了实现网页拖拽的例子。网页应用中，拖拽就是用户的鼠标在某个dom元素上按下去，然后拖动这个元素，最后松开鼠标的过程，这个过程是重复的，拖拽涉及的事件包括<br>mousedown，mouseup和mousemove，使用传统方式，基本上就是当mousedown事件发生时，用一个变量标识当前进入拖拽状态，然后监听mousemove事件，移动dom元素位置，当mouseup事件发生时，改变状态变量使之标记为“离开拖拽”，等待下一次mousedown事件的发生。<br>这个过程可以看成是多个由mousedown事件引发的数据流序列，每个序列内部又是以mouseup结束的mousemove数据序列。这些序列相互之间不可能交叉重复，这时可以考虑使用高阶map操作符concatMap实现这个例子。详细的代码可参考<a href="https://github.com/mocheng/dissecting-rxjs/blob/master/chapter-08/transform/src/concatMap/drag_drop.html" target="_blank" rel="noopener">concatMap example</a><br>  RxJS还有一些非常有意思的特性，包括Scheduler，单元测试等，这些并未在这篇博客中体现，读者可以根据自身需要去了解。<br>  可以得出，只有在项目中使用RxJS，经过大量实践，才能真正掌握RxJS这套工具。我乖乖地合上了这本书，打算找个项目练练手去了。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>《深入浅出RxJS》这本书的代码依赖的是RxJs v5.5.0之前的版本，大部分操作符都是采用给Observable类打补丁的形式引用的，我在尝试看这本书的时候，RxJS的版本已经是V6.3.3了，在该版本中，将打补丁的形式完全移除，将所有实例操作符改成了pipeable操作符，其目录存放在”rxjs/operators”，静态操作符直接使用，其目录就在”rxjs/index.js”。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很早就在一些博客和书籍上了解到，javascript是一门具备函数式编程特性的语言，虽然在日常工作也会接触到js的闭包，函数绑定，函数柯里化等概念，但对于函数式编程的特点和优势，一直一知半解。加之在工作中总会遇到异步处理的糟糕代码，所以前段时间花了一些功夫在阅读程墨著作的《深入浅出RxJS》上。总的来说，RxJS是Reactive Extension(也叫ReactiveX)编程理念的javascript版本。Reactive Extension是实践响应式编程的一套工具，其诞生的主要目的是解决异步处理的问题，但这并不表示Rx不适合同步的数据处理。这篇文章主要总结自己阅读《深入浅出RxJS》的一些思考，关于RxJS的具体使用可参考&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ReactiveX&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="函数式编程" scheme="https://rhliu228.github.io./blog/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="响应式" scheme="https://rhliu228.github.io./blog/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
  </entry>
  
</feed>
